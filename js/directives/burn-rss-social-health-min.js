!function(){var e=function(){return{scope:{},templateUrl:"templates/socialLinkage.html",replace:!0,controller:"socialController",controllerAs:"social"}},t=function(){var e=this;e.openSocial=function(e){chrome.tabs.create({url:e})}};directiveModule.directive("socialDirective",e),controllerModule.controller("socialController",t)}(),function(){var e=function(){return{scope:{},templateUrl:"templates/rssFeed.html",replace:!0,controller:"rssFeedController",controllerAs:"rssFeedCtrl"}},t=function(e,t){var r=this;e.retrieveJsonFromFile("data/rss_feed_information.json").then(function(e){r.dropdownRssOptions=e.rssFeedInfo}),r.openSelectFeed=function(t){e.retrieveFeed(t.url).then(function(e){r.rssFeedInfo=e.feed.entries})},r.openUrlLink=function(e){t.openUrlLink(e)},r.formatDate=function(e){if(null===localStorage.getItem("show_publication_date")){var t=new Date(e);return t}return""}};t.$inject=["feedService","lifescriptService"],directiveModule.directive("rssDirective",e),controllerModule.controller("rssFeedController",t)}(),function(){var e=function(){return{scope:{},templateUrl:"templates/burnItOff.html",replace:!0,controller:"burnItOffController",controllerAs:"burnIt"}},t=function(e){var t=this;e.retrieveJsonFromFile("data/burnitoff_information.json").then(function(e){t.burnitoff=e,t.exercise=e}),t.burnItOffError=null,t.minutesToBurnOffFood=null,t.burnItOffCalc=function(){{var e=t.selectedFood.value,r=t.selectedExerciseType.value;parseInt(t.selectedWeight,10)}t.minutesToBurnOffFood=Math.round(e/(3.5*r*(t.selectedWeight/2.2)/200)*10)/10+" minutes of "+t.selectedExerciseType.name+" will burn off an "+t.selectedFood.name}},r=function(){return function(e,t){if(angular.isUndefined(e)||angular.isUndefined(t))return e;var r=[];return angular.forEach(t,function(t){angular.forEach(e,function(e){angular.equals(e.parent,t)&&r.push(e)})}),r}};t.$inject=["feedService"],directiveModule.directive("burnItOffDirective",e),controllerModule.controller("burnItOffController",t),filterModule.filter("foodExerciseFilter",r)}(),function(){var e=function(){return{scope:{},templateUrl:"templates/totalHealthCalc.html",replace:!0,controller:"totalHealthController",controllerAs:"healthCalc"}},t=function(e){var t=this;e.retrieveJsonFromFile("data/activity_level.json").then(function(e){t.activityLevels=e.activity_level}),t.totalFitnessCalc=function(){t.resultTargetHeartRate=r(),t.resultBMR=n()+" calories burned per day";var e=l(),c="";18.5>e?c=" (underweight)":e>=18.5&&24.9>=e?c=" (normal weight)":e>=25&&29.9>=e?c=" (overweight)":e>=30&&(c=" (obesity)"),t.resultBMI=e+c,t.resultCaloriesNeed=o()+" calories per day",t.resultIdealBodyWeight=i(!0)+" pounds ("+i(!1)+" kg)";var s=a();t.resultWaistToHip=s+(s>.8?" (apple shape)":" (pear shape)"),t.showHealthResult=!0};var r=function(){var e=220-t.selectedAges-t.selectedHeartRate,r=Math.round(.6*e+t.selectedHeartRate),n=Math.round(.7*e+t.selectedHeartRate);return r+" to "+n+" beats per minute"},n=function(){var e=t.selectedWeightLbs/2.2,r=2.54*(12*t.selectedHeightFt+t.selectedHeightInches),n=0;return n="f"==t.gender?655+9.6*e+1.8*r-4.7*t.selectedAges:66+13.7*e+5*r-6.8*t.selectedAges,Math.round(n)},l=function(){var e=12*t.selectedHeightFt+t.selectedHeightInches;return Math.round(703*t.selectedWeightLbs*10/e/e/10)},o=function(){var e=t.selectedWeightLbs/2.2,r=(2.54*(12*t.selectedHeightFt+t.selectedHeightInches),"f"==t.gender?1:.9,0),n="m"==t.gender?!0:!1;switch(t.selectedActivityLevel.id){case 1:r=Math.round(e*(n?31:30));break;case 2:r=Math.round(e*(n?38:35));break;case 3:r=Math.round(e*(n?41:37));break;case 4:r=Math.round(e*(n?50:44));break;case 5:r=Math.round(e*(n?58:51));break;default:r=Math.round(e*(n?41:37))}return r},i=function(e){var r=0,n=12*t.selectedHeightFt+t.selectedHeightInches;return n>60&&(r=n-60),Math.round(2.3*r+("f"==t.gender?45.5:50)*(e?2.2:1))},a=function(){return Math.round(t.selectedWaist/t.selectedHips)}},r=function(){return function(e,t,r,n){t=parseInt(t),r=parseInt(r)+(n?1:0);for(var l=t;r>l;l++)e.push(l);return e}};t.$inject=["feedService"],directiveModule.directive("totalHealthDirective",e),controllerModule.controller("totalHealthController",t),filterModule.filter("rangeFilter",[r])}();